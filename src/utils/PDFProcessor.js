/**
 * PDFProcessor - Utilidad para extraer texto de archivos PDF usando PDF.js
 * Maneja la extracci√≥n de texto de documentos PDF en el navegador
 */
class PDFProcessor {
    constructor() {
        this.supportedTypes = ['application/pdf'];
        this.maxFileSize = 10 * 1024 * 1024; // 10MB
        this.isInitialized = false;
        this.initializePdfJs();
    }

    /**
     * Inicializa PDF.js
     */
    initializePdfJs() {
        if (typeof pdfjsLib !== 'undefined') {
            // Configurar PDF.js
            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
            this.isInitialized = true;
        } else {
            console.warn('PDF.js no est√° disponible. Aseg√∫rate de incluir la biblioteca en tu p√°gina.');
        }
    }

    /**
     * Valida si el archivo es un PDF v√°lido
     * @param {File} file - Archivo a validar
     * @returns {Object} - {isValid: boolean, error: string}
     */
    validateFile(file) {
        if (!file) {
            return { isValid: false, error: 'No se proporcion√≥ archivo' };
        }

        if (!this.supportedTypes.includes(file.type)) {
            return { isValid: false, error: 'El archivo debe ser un PDF' };
        }

        if (file.size > this.maxFileSize) {
            return { isValid: false, error: 'El archivo es muy grande (m√°ximo 10MB)' };
        }

        if (file.size === 0) {
            return { isValid: false, error: 'El archivo est√° vac√≠o' };
        }

        return { isValid: true, error: null };
    }

    /**
     * Extrae texto de un archivo PDF usando PDF.js
     * @param {File} file - Archivo PDF
     * @param {Function} progressCallback - Callback para mostrar progreso (opcional)
     * @param {string} password - Contrase√±a del PDF (opcional)
     * @returns {Promise<string>} - Texto extra√≠do del PDF
     */
    async extractTextFromFile(file, progressCallback = null, password = null) {
        // Validar archivo
        const validation = this.validateFile(file);
        if (!validation.isValid) {
            throw new Error(validation.error);
        }

        if (!this.isInitialized) {
            throw new Error('PDF.js no est√° inicializado correctamente.');
        }

        try {
            if (progressCallback) progressCallback(10, 'Leyendo archivo...');

            // Convertir archivo a ArrayBuffer
            const arrayBuffer = await this.fileToArrayBuffer(file);

            if (progressCallback) progressCallback(30, 'Cargando PDF...');

            // Usar PDF.js para extraer texto
            const text = await this.extractTextWithPdfJs(arrayBuffer, progressCallback, password);

            if (progressCallback) progressCallback(100, 'Extracci√≥n completada');

            return text;

        } catch (error) {
            console.error('Error extrayendo texto del PDF:', error);

            // Propagar errores espec√≠ficos sin envolver
            if (error.name === 'PDFPasswordRequired') {
                throw error;
            }

            throw new Error(`Error procesando PDF: ${error.message}`);
        }
    }

    /**
     * Convierte File a ArrayBuffer
     * @param {File} file - Archivo a convertir
     * @returns {Promise<ArrayBuffer>} - ArrayBuffer del archivo
     */
    async fileToArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();

            reader.onload = (event) => {
                resolve(event.target.result);
            };

            reader.onerror = () => {
                reject(new Error('Error leyendo el archivo'));
            };

            reader.readAsArrayBuffer(file);
        });
    }

    /**
     * Extrae texto usando PDF.js
     * @param {ArrayBuffer} arrayBuffer - Buffer del PDF
     * @param {Function} progressCallback - Callback de progreso
     * @param {string} password - Contrase√±a del PDF (opcional)
     * @returns {Promise<string>} - Texto extra√≠do
     */
    async extractTextWithPdfJs(arrayBuffer, progressCallback = null, password = null) {
        try {
            if (progressCallback) progressCallback(40, 'Cargando documento PDF...');

            console.log('üîë [PDF DEBUG] Intentando cargar PDF con contrase√±a:', password ? 'S√ç (' + password.length + ' caracteres)' : 'NO');

            // Preparar configuraci√≥n para cargar el documento PDF
            const config = { data: arrayBuffer };

            // Solo agregar password si existe y no est√° vac√≠o
            if (password && password.trim()) {
                config.password = password.trim();
                console.log('üîë [PDF DEBUG] Password agregado a config:', config.password.length, 'caracteres');
            }

            const loadingTask = pdfjsLib.getDocument(config);

            // Cargar el documento PDF (PDF.js lanzar√° PasswordException si no hay contrase√±a)
            const pdf = await loadingTask.promise;
            const numPages = pdf.numPages;

            if (progressCallback) progressCallback(50, `Procesando ${numPages} p√°ginas...`);

            let extractedText = '';

            // Procesar cada p√°gina
            for (let pageNum = 1; pageNum <= numPages; pageNum++) {
                if (progressCallback) {
                    const progress = 50 + (pageNum / numPages) * 40;
                    progressCallback(progress, `Procesando p√°gina ${pageNum}/${numPages}...`);
                }

                // Obtener la p√°gina
                const page = await pdf.getPage(pageNum);

                // Extraer el contenido de texto
                const textContent = await page.getTextContent();

                // Procesar los elementos de texto
                const pageText = this.processTextContent(textContent);
                extractedText += pageText + '\n';
            }

            if (progressCallback) progressCallback(95, 'Finalizando extracci√≥n...');

            console.log(`‚úÖ [PDF DEBUG] Texto final extra√≠do con ${extractedText.split('\n').length} l√≠neas`);

            // NO usar cleanExtractedText que da√±a la separaci√≥n de l√≠neas
            return extractedText.trim();

        } catch (error) {
            console.error('Error con PDF.js:', error);

            // Verificar si es un error de contrase√±a
            if (error.name === 'PasswordException' ||
                error.message?.includes('password') ||
                error.message?.includes('encrypted') ||
                error.message?.includes('No password given') ||
                error.code === 1) { // PDF.js error code for password required

                console.log('üîë [PDF DEBUG] Error de contrase√±a detectado:', error.name, error.code, error.message);

                // Crear un error espec√≠fico para contrase√±a
                const passwordError = new Error('PDF_PASSWORD_REQUIRED');
                passwordError.name = 'PDFPasswordRequired';
                passwordError.originalError = error;
                throw passwordError;
            }

            throw new Error(`Error extrayendo texto del PDF: ${error.message}`);
        }
    }

    /**
     * Procesa el contenido de texto de una p√°gina
     * @param {Object} textContent - Contenido de texto de PDF.js
     * @returns {string} - Texto procesado de la p√°gina
     */
    processTextContent(textContent) {
        let pageText = '';
        let currentY = null;
        let lineText = '';

        // Ordenar elementos por posici√≥n Y (de arriba a abajo) y luego por X (izquierda a derecha)
        const sortedItems = textContent.items.sort((a, b) => {
            // Primero por Y (coordenada vertical)
            const yDiff = Math.abs(a.transform[5] - b.transform[5]);
            if (yDiff > 1) { // Tolerancia m√°s estricta para elementos en la misma l√≠nea
                return b.transform[5] - a.transform[5]; // Orden descendente (de arriba a abajo)
            }
            // Si est√°n en la misma l√≠nea, ordenar por X (izquierda a derecha)
            return a.transform[4] - b.transform[4];
        });

        console.log(`üìù [PDF DEBUG] Procesando ${sortedItems.length} elementos de texto`);

        for (let i = 0; i < sortedItems.length; i++) {
            const item = sortedItems[i];
            const itemY = Math.round(item.transform[5]);

            // Verificar si cambi√≥ la l√≠nea Y
            if (currentY !== null && Math.abs(currentY - itemY) > 1) {
                // Agregar la l√≠nea anterior al texto si no est√° vac√≠a
                if (lineText.trim()) {
                    pageText += lineText.trim() + '\n';

                    // Debug: mostrar primeras 10 l√≠neas
                    const lineCount = pageText.split('\n').length;
                    if (lineCount <= 10) {
                        console.log(`üìÑ [PDF DEBUG] L√≠nea ${lineCount}: "${lineText.trim()}"`);
                    }
                }
                lineText = '';
            }

            currentY = itemY;

            // Agregar el texto del elemento a la l√≠nea actual
            if (lineText && !lineText.endsWith(' ') && !item.str.startsWith(' ')) {
                lineText += ' ';
            }
            lineText += item.str;
        }

        // Agregar la √∫ltima l√≠nea
        if (lineText.trim()) {
            pageText += lineText.trim() + '\n';
            const lineCount = pageText.split('\n').length;
            if (lineCount <= 10) {
                console.log(`üìÑ [PDF DEBUG] L√≠nea final ${lineCount}: "${lineText.trim()}"`);
            }
        }

        // Post-procesamiento: dividir l√≠neas muy largas que contengan m√∫ltiples transacciones
        pageText = this.splitLongTransactionLines(pageText);

        return pageText;
    }

    /**
     * Divide l√≠neas muy largas que pueden contener m√∫ltiples transacciones
     * @param {string} text - Texto de la p√°gina
     * @returns {string} - Texto con l√≠neas divididas apropiadamente
     */
    splitLongTransactionLines(text) {
        const lines = text.split('\n');
        const processedLines = [];

        for (const line of lines) {
            if (line.length > 500) { // L√≠neas muy largas
                console.log(`üî® [PDF DEBUG] Dividiendo l√≠nea larga (${line.length} chars)`);

                // Buscar patrones de transacciones para dividir
                // Patr√≥n t√≠pico: [Ubicaci√≥n] DD/MM/YYYY [Descripci√≥n] [C√≥digo] [Montos]
                const transactionPattern = /([A-Za-z\s]*\s+)?(\d{1,2}\/\d{1,2}\/\d{4})\s+([^T\d]+)\s+([TA]\d?\s+)?(\d{1,3}(?:\.\d{3})*)/g;

                let lastIndex = 0;
                let match;

                while ((match = transactionPattern.exec(line)) !== null) {
                    const matchStart = match.index;

                    // Si hay texto antes de esta transacci√≥n, agregarlo
                    if (matchStart > lastIndex) {
                        const beforeText = line.substring(lastIndex, matchStart).trim();
                        if (beforeText) {
                            processedLines.push(beforeText);
                        }
                    }

                    // Encontrar el final de esta transacci√≥n (hasta la siguiente fecha o final de l√≠nea)
                    const nextMatch = transactionPattern.exec(line);
                    let transactionEnd;

                    if (nextMatch) {
                        transactionEnd = nextMatch.index;
                        // Retroceder el √≠ndice para el pr√≥ximo ciclo
                        transactionPattern.lastIndex = nextMatch.index;
                    } else {
                        transactionEnd = line.length;
                    }

                    const transaction = line.substring(matchStart, transactionEnd).trim();
                    if (transaction) {
                        processedLines.push(transaction);
                        console.log(`‚úÇÔ∏è [PDF DEBUG] Transacci√≥n extra√≠da: "${transaction}"`);
                    }

                    lastIndex = transactionEnd;

                    if (!nextMatch) break;
                }

                // Agregar cualquier texto restante
                if (lastIndex < line.length) {
                    const remainingText = line.substring(lastIndex).trim();
                    if (remainingText) {
                        processedLines.push(remainingText);
                    }
                }
            } else {
                // L√≠nea normal, agregar tal como est√°
                processedLines.push(line);
            }
        }

        const result = processedLines.join('\n');
        console.log(`üìè [PDF DEBUG] L√≠neas originales: ${lines.length}, L√≠neas procesadas: ${processedLines.length}`);

        return result;
    }

    /**
     * Limpia y normaliza el texto extra√≠do
     * @param {string} text - Texto raw extra√≠do
     * @returns {string} - Texto limpio
     */
    cleanExtractedText(text) {
        if (!text || typeof text !== 'string') {
            return '';
        }

        return text
            // Remover caracteres de control y no imprimibles
            .replace(/[\x00-\x1F\x7F-\x9F]/g, ' ')
            // Normalizar espacios en blanco m√∫ltiples
            .replace(/\s+/g, ' ')
            // Normalizar saltos de l√≠nea m√∫ltiples
            .replace(/\n\s*\n/g, '\n')
            // Remover espacios al inicio y final de cada l√≠nea
            .split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 0)
            .join('\n')
            // Remover espacios al inicio y final del texto completo
            .trim();
    }

    /**
     * Procesa un archivo y extrae l√≠neas candidatas para parsing
     * @param {File} file - Archivo PDF
     * @param {Function} progressCallback - Callback de progreso
     * @param {string} password - Contrase√±a del PDF (opcional)
     * @returns {Promise<Object>} - {text: string, lines: string[], metadata: Object}
     */
    async processFile(file, progressCallback = null, password = null) {
        try {
            console.log('üîë [PROCESS DEBUG] processFile iniciado con contrase√±a:', password ? 'S√ç (' + password.length + ' chars)' : 'NO');

            if (progressCallback) progressCallback(0, 'Iniciando procesamiento...');

            const text = await this.extractTextFromFile(file, (progress, message) => {
                if (progressCallback) progressCallback(progress * 0.8, message);
            }, password);

            if (progressCallback) progressCallback(85, 'Extrayendo l√≠neas candidatas...');

            // Extraer l√≠neas candidatas
            const lines = this.extractCandidateLines(text);

            if (progressCallback) progressCallback(95, 'Generando metadatos...');

            // Generar metadatos
            const metadata = {
                fileName: file.name,
                fileSize: file.size,
                extractedTextLength: text.length,
                totalLines: lines.length,
                processedAt: new Date().toISOString()
            };

            if (progressCallback) progressCallback(100, 'Procesamiento completado');

            return {
                text: text,
                lines: lines,
                metadata: metadata
            };

        } catch (error) {
            console.error('Error procesando archivo:', error);
            throw error;
        }
    }

    /**
     * Extrae l√≠neas candidatas para ser procesadas por los parsers
     * @param {string} text - Texto completo del PDF
     * @returns {string[]} - Array de l√≠neas candidatas
     */
    extractCandidateLines(text) {
        if (!text) return [];

        const allLines = text.split(/\r?\n/);
        const candidateLines = [];

        console.log(`üîç [PDF DEBUG] Evaluando ${allLines.length} l√≠neas del PDF`);

        for (let i = 0; i < allLines.length; i++) {
            const line = allLines[i];
            const cleanLine = line.trim();

            // Mostrar primeras 20 l√≠neas para debug
            if (i < 20) {
                console.log(`üìÑ [PDF DEBUG] L√≠nea ${i + 1}: "${cleanLine}"`);
            }

            // Buscar espec√≠ficamente MONTO CANCELADO para debug
            if (cleanLine.includes('MONTO CANCELADO')) {
                console.log(`üéØ [PDF DEBUG] ENCONTRADO MONTO CANCELADO en l√≠nea ${i + 1}: "${cleanLine}"`);
            }

            // Buscar montos negativos para debug
            if (cleanLine.includes('$ -') || cleanLine.includes('$-')) {
                console.log(`üí∏ [PDF DEBUG] MONTO NEGATIVO en l√≠nea ${i + 1}: "${cleanLine}"`);
            }

            // Filtrar l√≠neas muy cortas
            if (cleanLine.length < 10) {
                if (i < 20) console.log(`  ‚ùå Muy corta (${cleanLine.length} chars)`);
                continue;
            }

            // Verificar si es header
            const isHeader = this.isHeaderLine(cleanLine);
            if (isHeader) {
                if (i < 20) console.log(`  ‚ùå Es header/metadato`);
                continue;
            }

            // Verificar patrones
            const hasDate = this.hasDatePattern(cleanLine);
            const hasAmount = this.hasAmountPattern(cleanLine);

            if (i < 20) {
                console.log(`  üìÖ Tiene fecha: ${hasDate}`);
                console.log(`  üí∞ Tiene monto: ${hasAmount}`);
            }

            // Si tiene patr√≥n de fecha, es candidata
            if (hasDate) {
                candidateLines.push(cleanLine);
                if (i < 20) console.log(`  ‚úÖ Agregada como candidata (fecha)`);
            }

            // Tambi√©n incluir l√≠neas que tengan patrones de montos (n√∫meros con puntos o comas)
            else if (hasAmount) {
                candidateLines.push(cleanLine);
                if (i < 20) console.log(`  ‚úÖ Agregada como candidata (monto)`);
            }

            if (i < 20 && !hasDate && !hasAmount) {
                console.log(`  ‚ùå Sin patrones v√°lidos`);
            }
        }

        console.log(`üìã [PDF DEBUG] Total l√≠neas candidatas: ${candidateLines.length}`);

        // Eliminar duplicados manteniendo el orden
        return [...new Set(candidateLines)];
    }

    /**
     * Determina si una l√≠nea es un header o metadato
     * @param {string} line - L√≠nea a evaluar
     * @returns {boolean} - true si es header
     */
    isHeaderLine(line) {
        const lowerLine = line.toLowerCase();

        const headerKeywords = [
            'p√°gina', 'page', 'fecha emisi√≥n', 'rut', 'nombre titular',
            'direcci√≥n', 'estado de cuenta', 'resumen', 'detalle',
            'banco falabella', 'periodo', 'cliente', 'tarjeta', 'cuenta corriente',
            'cupon de pago', 'cliente elite', 'fecha facturaci√≥n', 'monto total facturado',
            'monto m√≠nimo', 'cmr puntos', 'informaci√≥n general', 'cupo total',
            'cupo utilizado', 'cupo disponible', 'cupo compras', 'cupo avance',
            'tasa inter√©s', 'per√≠odo facturado', 'pagar hasta'
        ];

        // No filtrar l√≠neas que contengan "total" al final, ya que pueden ser transacciones
        const isTransactionLike = lowerLine.includes('total') && (
            this.hasDatePattern(line) || this.hasAmountPattern(line)
        );

        if (isTransactionLike) {
            return false; // No es header, podr√≠a ser transacci√≥n
        }

        return headerKeywords.some(keyword => lowerLine.includes(keyword));
    }

    /**
     * Verifica si una l√≠nea tiene patr√≥n de fecha
     * @param {string} line - L√≠nea a verificar
     * @returns {boolean} - true si tiene fecha
     */
    hasDatePattern(line) {
        const datePatterns = [
            /\b\d{1,2}\/\d{1,2}\/\d{4}\b/,  // dd/mm/yyyy
            /\b\d{1,2}\/\d{1,2}\/\d{2}\b/,  // dd/mm/yy (Santander)
            /^\d{1,2}\/\d{1,2}\s/,          // dd/mm al inicio de l√≠nea (Cuenta Corriente)
            /\b\d{4}-\d{1,2}-\d{1,2}\b/,    // yyyy-mm-dd
            /\b\d{1,2}-\d{1,2}-\d{4}\b/     // dd-mm-yyyy
        ];

        return datePatterns.some(pattern => pattern.test(line));
    }

    /**
     * Verifica si una l√≠nea tiene patr√≥n de monto
     * @param {string} line - L√≠nea a verificar
     * @returns {boolean} - true si tiene monto
     */
    hasAmountPattern(line) {
        // Patrones para detectar montos (n√∫meros con separadores de miles)
        const amountPatterns = [
            /\b\d{1,3}(?:\.\d{3})*(?:,\d{2})?\b/,  // 1.000,00 o 1.000
            /\b\d{1,3}(?:,\d{3})*(?:\.\d{2})?\b/,  // 1,000.00 o 1,000
            /\b\d+\.\d{3}\b/,                       // 37.905
            /\b\d+,\d{3}\b/                         // 37,905
        ];

        return amountPatterns.some(pattern => pattern.test(line));
    }

    /**
     * Obtiene informaci√≥n sobre las capacidades del processor
     * @returns {Object} - Informaci√≥n sobre capacidades
     */
    getCapabilities() {
        return {
            supportedTypes: this.supportedTypes,
            maxFileSize: this.maxFileSize,
            maxFileSizeMB: Math.round(this.maxFileSize / (1024 * 1024)),
            hasNativeSupport: this.isInitialized,
            library: 'PDF.js',
            version: typeof pdfjsLib !== 'undefined' ? pdfjsLib.version : 'No disponible'
        };
    }

    /**
     * Testing del processor con casos simulados
     */
    static async runTests() {
        console.log('üß™ === TESTING PDF PROCESSOR ===');

        const processor = new PDFProcessor();

        // Test 1: Verificar capacidades
        console.log('\nüìã Capacidades del processor:');
        const capabilities = processor.getCapabilities();
        console.log(capabilities);

        // Test 2: Validaci√≥n de archivos
        console.log('\nüìÅ Test de validaci√≥n de archivos:');

        // Simular archivo inv√°lido
        const invalidFile = { type: 'text/plain', size: 1000 };
        const validation1 = processor.validateFile(invalidFile);
        console.log(`Archivo inv√°lido: ${validation1.isValid ? '‚ùå ERROR' : '‚úÖ CORRECTAMENTE RECHAZADO'}`);

        // Simular archivo muy grande
        const largeFile = { type: 'application/pdf', size: 20 * 1024 * 1024 };
        const validation2 = processor.validateFile(largeFile);
        console.log(`Archivo muy grande: ${validation2.isValid ? '‚ùå ERROR' : '‚úÖ CORRECTAMENTE RECHAZADO'}`);

        // Simular archivo v√°lido
        const validFile = { type: 'application/pdf', size: 1000 };
        const validation3 = processor.validateFile(validFile);
        console.log(`Archivo v√°lido: ${validation3.isValid ? '‚úÖ CORRECTAMENTE ACEPTADO' : '‚ùå ERROR'}`);

        // Test 3: Limpieza de texto
        console.log('\nüßπ Test de limpieza de texto:');
        const dirtyText = '  Hola\x00\x01mundo\n\n\ncon    espacios  ';
        const cleanText = processor.cleanExtractedText(dirtyText);
        console.log(`Texto sucio: "${dirtyText}"`);
        console.log(`Texto limpio: "${cleanText}"`);

        // Test 4: Extracci√≥n de l√≠neas candidatas
        console.log('\nüìÑ Test de extracci√≥n de l√≠neas:');
        const sampleText = `
        BANCO FALABELLA
        Estado de Cuenta
        P√°gina 1

        27/07/2025 Compra falabella plaza vespucio T 37.905
        Esta l√≠nea es muy corta
        05/08/2025 Colmena golden cross A2 351.357
        TOTAL MOVIMIENTOS
        19/07/2025 Uber eats T 27.437
        `;

        const lines = processor.extractCandidateLines(sampleText);
        console.log(`L√≠neas candidatas extra√≠das: ${lines.length}`);
        lines.forEach((line, index) => {
            console.log(`  ${index + 1}. "${line}"`);
        });

        // Test 5: Verificar disponibilidad de PDF.js
        console.log('\nüîß Test de PDF.js:');
        if (processor.isInitialized) {
            console.log('‚úÖ PDF.js est√° inicializado correctamente');
        } else {
            console.log('‚ùå PDF.js no est√° disponible');
        }

        return true;
    }
}